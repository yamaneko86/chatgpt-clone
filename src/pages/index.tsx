import Head from "next/head";
import { Configuration, OpenAIApi } from "openai";
import { FormEvent, useState } from "react";

export default function Home() {
  const [message, setMessage] = useState<string>("");
  const [messages, setMessages] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  const cfg = new Configuration({
    apiKey: process.env.NEXT_PUBLIC_OPENAI_KEY,
  });

  const openai = new OpenAIApi(cfg);

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setIsLoading(true);

    // APIを叩く
    const res = await openai.createChatCompletion({
      model: "gpt-3.5-turbo",
      messages: [{ role: "user", content: message }],
    });

    // ユーザーとAIのメッセージをセット
    setMessages((prevMessages: string[]) => [
      ...prevMessages,
      JSON.stringify({ sender: "user", text: message }),
      JSON.stringify({
        sender: "ai",
        text: res.data.choices[0].message?.content,
      }),
    ]);

    setIsLoading(false);
  };

  return (
    <>
      <Head>
        <title>ChatGPT Clone App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex flex-col items-center justify-center h-screen">
        <div className="max-w-lg w-full">
          <div
            style={{ height: "600px" }}
            className="bg-gray-100 w-full p-4 h-96 overflow-scroll rounded-t-lg"
          >
            <span className="text-center block font-medium text-2xl border-b-2 border-indigo-400 pb-4 mb-3">
              ChatGPT-Clone
            </span>
            {messages.map((message: any, index) => {
              return (
                <div
                  className={`flex ${
                    message.sender === "user" ? "justify-end" : "justify-start"
                  } mb-2`}
                  key={index}
                >
                  <div
                    className={`${
                      message.sender === "user"
                        ? "bg-indigo-400 text-white"
                        : "bg-gray-200"
                    } p-2 rounded-md`}
                  >
                    {message.text}
                  </div>
                </div>
              );
            })}
          </div>
          <form className="w-full" onSubmit={(e) => handleSubmit(e)}>
            <div className="flex items-center p-4 bg-gray-100 rounded-b-lg w-full">
              <input
                type="text"
                className="flex-1 border-2 py-2 px-4 focus:outline-none rounded-lg focus:border-indigo-400"
                onChange={(e) => setMessage(e.target.value)}
                value={message}
              />
              <button
                type="submit"
                className="p-2 bg-indigo-400 rounded-lg text-white hover:bg-indigo-500"
              >
                {isLoading ? "送信中..." : "送信"}
              </button>
            </div>
          </form>
        </div>
      </div>
    </>
  );
}
